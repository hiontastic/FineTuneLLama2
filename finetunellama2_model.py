# -*- coding: utf-8 -*-
"""FineTuneLlama2 Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KASt2dYIqlw4MHIUnp_baQ6NovLURrpg
"""

!pip install -q accelerate==0.21.0 peft==0.4.0 bitsandbytes==0.40.2 transformers==4.31.0 trl==0.4.7

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd drive/My Drive

import os
import torch
from datasets import load_dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    HfArgumentParser,
    TrainingArguments,
    pipeline,
    logging,
)
from peft import LoraConfig, PeftModel
from trl import SFTTrainer

#install Neptune client
!pip install neptune-client

"""# Importing Configurations and Hyperparameters"""

train_path = "/content/drive/My Drive/mashqa_data/train_webmd_squad_v2_consec.json"
val_path = "/content/drive/My Drive/mashqa_data/val_webmd_squad_v2_consec.json"
test_path = "/content/drive/My Drive/mashqa_data/test_webmd_squad_v2_consec.json"

model_name = "NousResearch/Llama-2-7b-chat-hf"
#dataset_name = "mlabonne/guanaco-llama2-1k"
new_model = "llama-2-7b-miniguanaco"

"""# Load the model and define necessary parameters ready for modeling"""

from torch.utils.data import Dataset
import torch

class CustomDataset(Dataset):
    def __init__(self, tokenizer, questions, answers, max_length):
        self.tokenizer = tokenizer
        self.questions = questions
        self.answers = answers
        self.max_length = max_length

    def __len__(self):
        return len(self.questions)

    def __getitem__(self, idx):
        question = self.questions[idx]
        answer = self.answers[idx]
        encoding = self.tokenizer(question, answer, truncation=True, padding='max_length', max_length=self.max_length)
        return {key: torch.tensor(val) for key, val in encoding.items()}

lora_r = 64
lora_alpha = 16
lora_dropout = 0.1

use_4bit = True
bnb_4bit_compute_dtype = "float16"
bnb_4bit_quant_type = "nf4"
use_nested_quant = False

output_dir = "/content/drive/MyDrive/MSCA32021FinalProject"
num_train_epochs = 0.2 #change this
fp16 = False
bf16 = False
per_device_train_batch_size = 4 #change this
per_device_eval_batch_size = 4
gradient_accumulation_steps = 1 #change this
gradient_checkpointing = True
max_grad_norm = 0.3
learning_rate = 2e-4
weight_decay = 0.001
optim = "paged_adamw_32bit"
lr_scheduler_type = "constant"
max_steps = -1
warmup_ratio = 0.03
group_by_length = True
save_steps = 200 #change this
logging_steps = 200 #change this

max_seq_length = None
packing = False
device_map = {"": 0}

# Load tokenizer and model with QLoRA configuration
compute_dtype = getattr(torch, bnb_4bit_compute_dtype)

bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)

# Check GPU compatibility with bfloat16
if compute_dtype == torch.float16 and use_4bit:
    major, _ = torch.cuda.get_device_capability()
    if major >= 8:
        print("=" * 80)
        print("Your GPU supports bfloat16: accelerate training with bf16=True")
        print("=" * 80)

"""# Import the base Model and tokenizer"""

# Load base model
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map=device_map
)

model.config.use_cache = False
model.config.pretraining_tp = 1

# Load LLaMA tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right" # Fix weird overflow issue with fp16 training

"""# Introduce Platform and Record the Response"""

import neptune.new as neptune

run=neptune.init_run(
    project="a657774956/MlopsFinal",
    api_token="eyJhcGlfYWRkcmVzcyI6Imh0dHBzOi8vYXBwLm5lcHR1bmUuYWkiLCJhcGlfdXJsIjoiaHR0cHM6Ly9hcHAubmVwdHVuZS5haSIsImFwaV9rZXkiOiI1NDQyMjgxYi01NDQzLTRlZDQtODA1ZS1mNDY1ZWM4M2UxM2QifQ==",
)

from transformers import AutoTokenizer, pipeline
#import logging

# Ignore warnings
logging.set_verbosity(logging.CRITICAL)

# Define the prompts
prompts = [
    "What types of exercise are best for people with asthma?",
    "How is obsessive-compulsive disorder diagnosed?",
    "When are you more likely to get a blood clot?",
    "How should you lift objects to prevent back pain?",
    "How can you be smart with antibiotics?",
]

# Assuming 'model' variable is defined earlier and contains the desired model
tokenizer = AutoTokenizer.from_pretrained(model.name_or_path)

# Run text generation pipeline with the specified model
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=1000)

# Iterate through the prompts and print the results
for m, prompt in enumerate(prompts):
    result = pipe(f"<s>[INST] {prompt} [/INST]")
    generated_text = result[0]['generated_text']
    answer = generated_text.split('[INST]')[-1]  # Extract the answer part after the '[INST]' tag

    # Log the question and answer to Neptune
    run[f'base_model/qa_pair_{m}/question'] = prompt
    run[f'base_model/qa_pair_{m}/answer'] = answer

    print(f"Question: {prompt}\nAnswer: {answer}\n{'-'*50}\n")

"""# Processing the data by extracting questions and answers"""

import json

def load_data(path):
    with open(path, 'r') as file:
        data = json.load(file)
    # Process data as needed for your specific structure
    return data

train_data = load_data(train_path)
val_data = load_data(val_path)
# Process other files as needed

questions_and_answers = {'questions': [], 'answers': []}

for m in range(len(train_data['data'])):
  for paragraph in train_data['data'][m]['paragraphs']:
    for qas in paragraph['qas']:
      question = qas['question']
      answer = qas['answers'][0]['text']  # Assuming there is always at least one answer

        # Add to our dictionary
      questions_and_answers['questions'].append(question)
      questions_and_answers['answers'].append(answer)

val_questions_and_answers = {'questions': [], 'answers': []}

for m in range(len(val_data['data'])):
  for paragraph in val_data['data'][m]['paragraphs']:
    for qas in paragraph['qas']:
      question = qas['question']
      answer = qas['answers'][0]['text']  # Assuming there is always at least one answer

      # Add to our dictionary
      val_questions_and_answers['questions'].append(question)
      val_questions_and_answers['answers'].append(answer)

"""# Further adjust parameters to make the base model ready for training"""

max_length = 128 # Define the maximum sequence length
train_dataset = CustomDataset(tokenizer, questions_and_answers['questions'], questions_and_answers['answers'], max_length)

peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM",
)

training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    weight_decay=weight_decay,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type,
    report_to="tensorboard"
)

trainer = SFTTrainer(
    model=model,
    train_dataset=train_dataset,
    peft_config=peft_config,
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
    packing=packing,
)

"""# Train the model"""

# Train model
trainer.train()

"""# Export the trained Model and records the response to the platform"""

new_model=trainer.model
tokenizer = AutoTokenizer.from_pretrained(new_model.name_or_path)

# Run text generation pipeline with the newly trained model
pipe = pipeline(task="text-generation", model=new_model, tokenizer=tokenizer, max_length=1000)

# Iterate through the prompts and print the results
for m, prompt in enumerate(prompts):
    result = pipe(f"<s>[INST] {prompt} [/INST]")
    generated_text = result[0]['generated_text']
    answer = generated_text.split('[INST]')[-1]  # Extract the answer part after the '[INST]' tag

    # Log the question and answer to Neptune for the newly trained model
    run[f'trained_model/qa_pair_{m}/question'] = prompt
    run[f'trained_model/qa_pair_{m}/answer'] = answer

    print(f"Question: {prompt}\nAnswer: {answer}\n{'-'*50}\n")